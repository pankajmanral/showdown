python manage.py runserver 0.0.0.0:8000 - to run on localhost
python manage.py tailwind start - to start the tailwind
python manage.py runserver                                                                      


uncomment the mail in the account login view
uncomment the mail in the account registration view
uncomment the mail in the account forgotpassword view
uncomment the mail in the account resetpassword view


-------------------------------------------------------------------------------------------------------------------
Login logout module

Register a new user - 
    get() - 
        create a form 
        pass the form to the user

    post() - 
        get the filled form by the user using FormName(request.POST)
        check if the form is_valid() 
        if the form is valid collect the data and save the user 
        before creting a new user check that the username or the email should not be already existing in the user table if found redirect the user to the login page
        login(request,user)

Login a existing user - 
    get() - 
        give the user the form to enter the username and password 

    post() - 
        get the entered data from the user's form 
        and authenticate using django's 
            authenticate(request,username = username, password = password)
        if authenticated correctly login(request,user)

-------------------------------------------------------------------------------------------------------------------
Forget - Password module

get() - 
    give the user a form to enter the username and email

post() - 
    get the user entered data 
    check the esitance for the username AND email in the User model
    if found generate a otp and store the otp and username in the session

ORM Queries - 
-------------------------------------------------------------------------------------------------------------------

Fetch a single object from the database that matches the given query parameters.

.get() -    If it finds exactly one object matching the query, it returns that object.
            If no object matches, it raises a "Model.DoesNotExist" exception.
            If more than one object matches the query, it raises a "Model.MultipleObjectsReturned" exception.

Use Case: Use this when you expect only one record to match, such as fetching a unique user by their username or id.

-------------------------------------------------------------------------------------------------------------------

Fetch all objects that match the given query parameters as a QuerySet (which is iterable).

.filter() -     Returns a QuerySet containing all matching objects.
                If no objects match, it returns an empty QuerySet (instead of raising an error)

Use Case: Use filter when you expect multiple records to match or want to handle cases where there might be no matching
records gracefully


python manage.py staticfiles